# -*- coding: utf-8 -*-
"""dashboard_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kEN9bKk1kHKfBnrRvvUxx6pFPNmatlfH
"""

import streamlit as st
import pandas as pd
import os
import folium
import json
from streamlit_folium import st_folium

# === File Paths ===
DATA_PATH = "final_model_data_with_grade.csv"
SHAP_FOLDER = "shap_visuals"
GPT_FOLDER = "gpt_explanation"
GEOJSON_PATH = "LAD_MAY_2025_Simplified_5.geojson"


# === Cached loading functions ===
@st.cache_data
def load_data():
    return pd.read_csv(DATA_PATH)

@st.cache_data
def load_geojson():
    with open(GEOJSON_PATH, "r") as f:
        return json.load(f)

# === Load data (cached) ===
df = load_data()
geojson_data = load_geojson()


# === Helper: Normalise LAD names ===
def normalise(name):
    return name.strip().lower().replace(" ", "_").replace("-", "_").replace("/", "_")

# === UI ===
st.title("üè° Care Home Investment Dashboard (UK)")
st.write("Explore Local Authority Districts with predicted care home investment potential using SHAP + GPT explanations.")

# === LAD List ===
lad_names = df["Local_Authority"].sort_values().unique()

# === Session state for synced selection ===
if "selected_lad" not in st.session_state:
    st.session_state.selected_lad = lad_names[0]  # Default

# === Map first (so we can update the dropdown) ===
st.subheader("üó∫Ô∏è Clickable LAD Map")
m = folium.Map(location=[54.5, -3], zoom_start=5, tiles="cartodbpositron")

def on_click(feature):
    return {"fillColor": "#3186cc", "weight": 1, "fillOpacity": 0.6}

folium.GeoJson(
    geojson_data,
    name="LADs",
    style_function=lambda x: {"fillOpacity": 0.3, "weight": 0.2},
    highlight_function=on_click,
    tooltip=folium.GeoJsonTooltip(fields=["LAD25NM"], aliases=["LAD:"]),
).add_to(m)

map_output = st_folium(m, height=500, returned_objects=["last_active_drawing"])

# === Update session state if map was clicked ===
if map_output and map_output.get("last_active_drawing"):
    clicked_lad = map_output["last_active_drawing"]["properties"]["LAD25NM"]
    if clicked_lad in lad_names:
        st.session_state.selected_lad = clicked_lad

# === Dropdown linked to session_state ===
st.selectbox(
    "üîç Choose a Local Authority District (LAD):",
    lad_names,
    key="selected_lad"
)
selected_lad = st.session_state.selected_lad

# === LAD Selection via Map ===
clicked_lad = None
if map_output and map_output.get("last_active_drawing"):
    clicked_lad = map_output["last_active_drawing"]["properties"]["LAD25NM"]
    selected_lad = clicked_lad

# === Show LAD Info ===
if selected_lad:
    lad_row = df[df["Local_Authority"] == selected_lad]
    if not lad_row.empty:
        lad_row = lad_row.iloc[0]

        st.subheader(f"üìä Investment Summary: {selected_lad}")
        st.markdown(f"""
        - **Investment Score:** {lad_row['Investment_Potential_Score']:.2f}
        - **Predicted Label:** {'üü¢ HIGH' if lad_row['Investment_Grade'] == 'Good' else '‚ö†Ô∏è Consider' if lad_row['Investment_Grade'] == 'Medium' else '‚ùå Avoid' if lad_row['Investment_Grade'] == 'Bad' else 'Unknown'}
        - **% Aged 65+:** {lad_row['Percent_65plus']}%
        - **GDHI per Head:** ¬£{int(lad_row['GDHI_per_head_2022'])}
        - **House Price Growth:** {lad_row['House_Price_Growth_%']:.2f}%
        - **Care Homes Count:** {lad_row['Care_Homes_Count']}
        - **Care Homes per 10k:** {lad_row['Care_Homes_per_10k']:.2f}
        - **% CQC Good:** {lad_row['%_CQC_Good']:.2f}%
        - **% Requires Improvement:** {lad_row['%_CQC_RequiresImprovement']:.2f}%
        """)

        norm_name = normalise(selected_lad)
        shap_path = os.path.join(SHAP_FOLDER, f"{norm_name}.png")
        if os.path.exists(shap_path):
            st.subheader("üß† SHAP Visualisation")
            st.image(shap_path, use_container_width=True)
        else:
            st.warning("No SHAP image available for this LAD.")

        gpt_path = os.path.join(GPT_FOLDER, f"{norm_name}.txt")
        if os.path.exists(gpt_path):
            st.subheader("üí¨ GPT Explanation")
            with open(gpt_path, "r", encoding="utf-8") as f:
                st.markdown(f.read())
        else:
            st.info("No GPT explanation available for this LAD.")
    else:
        st.warning("This LAD is not in the model dataset.")

# === Footer ===
st.markdown("---")
st.caption("Created as part of MSc Project ‚Äì AI for Care Home Investment Support (2025)")
