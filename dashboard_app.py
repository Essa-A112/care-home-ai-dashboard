# -*- coding: utf-8 -*-
"""dashboard_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kEN9bKk1kHKfBnrRvvUxx6pFPNmatlfH
"""

import streamlit as st
import pandas as pd
import os
import folium
import json
from streamlit_folium import st_folium
import openai as openai_module
from openai import OpenAI

# === File Paths ===
DATA_PATH = "final_model_data_with_grade.csv"
SHAP_FOLDER = "shap_visuals"
GPT_FOLDER = "gpt_explanation"
ROI_FOLDER = "roi_gpt"
GEOJSON_PATH = "LAD_MAY_2025_Simplified_5.geojson"
ROI_PATH = "roi_by_district.csv"
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# === Cached loading functions ===
@st.cache_data
def load_data():
    return pd.read_csv(DATA_PATH)

@st.cache_data
def load_geojson():
    with open(GEOJSON_PATH, "r") as f:
        return json.load(f)


@st.cache_data
def load_roi_data():
    return pd.read_csv(ROI_PATH)

# === Load data (cached) ===
df = load_data()
geojson_data = load_geojson()
roi_df = load_roi_data()

# === Helper: Normalise LAD names ===
def normalise(name):
    return name.strip().lower().replace(" ", "_").replace("-", "_").replace("/", "_")

# === UI ===
st.title("üè° Care Home Investment Dashboard (UK)")
st.write("Explore Local Authority Districts with predicted care home investment potential using SHAP + GPT explanations.")

# === LLM Investment Assistant ===
# === LLM Investment Assistant with LAD Comparison + SHAP Explanation ===
st.markdown("---")
with st.expander("üß† LLM Investment Assistant", expanded=False):
    st.markdown("Ask investment-related questions like:")
    st.markdown("- *What‚Äôs the ROI in York?*")
    st.markdown("- *Compare Camden and Southwark*")
    st.markdown("- *Explain the SHAP visual for Leeds*")
    st.markdown("- *How were SHAP scores calculated?*")
    
    query = st.chat_input("Ask a question...")

    if query:
        with st.spinner("Thinking..."):

            def clean_name(name):
                return name.strip().lower().replace(" ", "_").replace("-", "_").replace("/", "_")

            summaries_dir = "roi_gpt"
            summaries = {
                os.path.splitext(f)[0]: open(os.path.join(summaries_dir, f), "r", encoding="utf-8").read()
                for f in os.listdir(summaries_dir) if f.endswith(".txt")
            }

            cleaned_query = query.lower()
            df["norm"] = df["Local_Authority"].apply(clean_name)
            matched_lads = [lad for lad in summaries if lad in cleaned_query]

            context = ""

            if matched_lads:
                for lad in matched_lads:
                    context += f"\n\n[{lad.replace('_', ' ').title()}]\n{summaries[lad]}"
                    row = df[df["norm"] == lad]

                    # === ROI fallback-safe fetch ===
                    lad_col = None
                    for col in roi_df.columns:
                        if "authority" in col.lower() or "lad" in col.lower():
                            lad_col = col
                            break

                    if lad_col:
                        roi_df["norm_lad"] = roi_df[lad_col].astype(str).apply(clean_name)
                        roi_row = roi_df[roi_df["norm_lad"] == lad]
                    else:
                        roi_row = pd.DataFrame()

                    if not row.empty:
                        r = row.iloc[0]
                        roi_str = ""
                        if not roi_row.empty and "ROI (%)" in roi_row.columns:
                            roi_val = roi_row.iloc[0]["ROI (%)"]
                            roi_str = f"ROI = {roi_val:.2f}%, "
                        else:
                            roi_str = "ROI data not available, "
                        context += (
                            f"\n[Data for {r['Local_Authority']}]:\n"
                            f"{roi_str}Score = {r['Investment_Potential_Score']:.2f}, "
                            f"Good CQC = {r['%_CQC_Good']:.1f}%, Elderly = {r['Percent_65plus']}%\n"
                        )

            if "shap" in cleaned_query or "explain visual" in cleaned_query:
                context += (
                    "\n\n[SHAP Explanation]: SHAP (SHapley Additive exPlanations) values show how much each feature "
                    "contributed to the predicted investment score. Positive SHAP values indicate factors that increased the score "
                    "(e.g., high ROI, high elderly population), while negative SHAP values reduced it. The visuals show the most influential features for each LAD."
                )

            if not context.strip():
                context = f"The user asked: {query}"

            prompt = f"""
You are an expert UK care home investment assistant. Use only the facts below to answer the user's question.
Context:\n{context}\n\n
If comparing LADs, use data to support your answer. Avoid guessing. 
Explain SHAP visuals if asked. Be concise, helpful, and professional.
"""

            try:
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "You are a helpful, expert LLM assistant in UK care home investment analytics."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.6,
                )
                output = response.choices[0].message.content
                st.markdown(output)

            except Exception as e:
                st.error(f"‚ùå GPT error: {e}")


# === LAD List ===
lad_names = df["Local_Authority"].sort_values().unique()

# === Session state for synced selection ===
if "selected_lad" not in st.session_state:
    st.session_state.selected_lad = lad_names[0]  # Default

# === Map first (so we can update the dropdown) ===
st.subheader("üó∫Ô∏è Clickable LAD Map")
m = folium.Map(location=[54.5, -3], zoom_start=5, tiles="cartodbpositron")

def on_click(feature):
    return {"fillColor": "#3186cc", "weight": 1, "fillOpacity": 0.6}

folium.GeoJson(
    geojson_data,
    name="LADs",
    style_function=lambda x: {"fillOpacity": 0.3, "weight": 0.2},
    highlight_function=on_click,
    tooltip=folium.GeoJsonTooltip(fields=["LAD25NM"], aliases=["LAD:"]),
).add_to(m)

map_output = st_folium(m, height=500, returned_objects=["last_active_drawing"])

# Fixed spacing to reduce excess white gap between map and dropdown
st.markdown("<div style='margin-bottom: -30px;'></div>", unsafe_allow_html=True)


# === Update session state if map was clicked ===
if map_output and map_output.get("last_active_drawing"):
    clicked_lad = map_output["last_active_drawing"]["properties"]["LAD25NM"]
    if clicked_lad in lad_names:
        st.session_state.selected_lad = clicked_lad

# === Dropdown linked to session_state ===
st.selectbox(
    "üîç Choose a Local Authority District (LAD):",
    lad_names,
    key="selected_lad"
)
selected_lad = st.session_state.selected_lad

# === LAD Selection via Map ===
clicked_lad = None
if map_output and map_output.get("last_active_drawing"):
    clicked_lad = map_output["last_active_drawing"]["properties"]["LAD25NM"]
    selected_lad = clicked_lad

# === Show LAD Info ===
if selected_lad:
    lad_row = df[df["Local_Authority"] == selected_lad]
    if not lad_row.empty:
        lad_row = lad_row.iloc[0]

        st.subheader(f"üìä Investment Summary: {selected_lad}")
        st.markdown(f"""
        - **Investment Score:** {lad_row['Investment_Potential_Score']:.2f} / 100
        - **Predicted Label:** {'üü¢ Good' if lad_row['Investment_Grade'] == 'Good' else '‚ö†Ô∏è Consider' if lad_row['Investment_Grade'] == 'Consider' else '‚ùå Avoid' if lad_row['Investment_Grade'] == 'Avoid' else 'Unknown'}
        - **% Aged 65+:** {lad_row['Percent_65plus']}%
        - **GDHI per Head:** ¬£{int(lad_row['GDHI_per_head_2022'])}
        - **House Price Growth:** {lad_row['House_Price_Growth_%']:.2f}%
        - **Care Homes Count:** {lad_row['Care_Homes_Count']}
        - **Care Homes per 10k:** {lad_row['Care_Homes_per_10k']:.2f}
        - **% CQC Good:** {lad_row['%_CQC_Good']:.2f}%
        - **% Requires Improvement:** {lad_row['%_CQC_RequiresImprovement']:.2f}%
        """)

        norm_name = normalise(selected_lad)

        # === SHAP Visual ===
        shap_path = os.path.join(SHAP_FOLDER, f"{norm_name}.png")
        if os.path.exists(shap_path):
            st.subheader("üß† SHAP Visualisation")
            st.image(shap_path, use_container_width=True)
        else:
            st.warning("No SHAP image available for this LAD.")

        st.markdown("<div style='height: 30px;'></div>", unsafe_allow_html=True)

        # === GPT Summary ===
        gpt_path = os.path.join(GPT_FOLDER, f"{norm_name}.txt")
        if os.path.exists(gpt_path):
            st.subheader("üí¨ LLM Summary")
            with open(gpt_path, "r", encoding="utf-8") as f:
                st.markdown(f.read())
        else:
            st.info("No LLM summary available for this LAD.")

        st.markdown("<div style='height: 30px;'></div>", unsafe_allow_html=True)

        # === ROI Simulation Summary ===
        roi_path = os.path.join(ROI_FOLDER, f"{norm_name}.txt")
        if os.path.exists(roi_path):
            st.subheader("üìà ROI Simulation Summary")
            with open(roi_path, "r", encoding="utf-8") as f:
                st.markdown(f.read())
        else:
            st.info("No ROI simulation summary adashboard_appvailable for this LAD.")

        st.markdown("<div style='height: 40px;'></div>", unsafe_allow_html=True)

    else:
        st.warning("This LAD is not in the model dataset.")

# === Footer ===
st.markdown("---")
st.caption("Created as part of MSc Project ‚Äì AI for Care Home Investment Support (2025)")
