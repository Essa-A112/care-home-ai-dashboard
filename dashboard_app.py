# -*- coding: utf-8 -*-
"""dashboard_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kEN9bKk1kHKfBnrRvvUxx6pFPNmatlfH
"""

!pip install streamlit pandas

import streamlit as st
import pandas as pd
import os

# Paths (adjust if not using Colab)
ROOT = "."
DATA_PATH = os.path.join(ROOT, "final_model_data_useful.csv")
SHAP_FOLDER = os.path.join(ROOT, "shap_visuals")
GPT_FOLDER = os.path.join(ROOT, "gpt_explanation")

# Load dataset
df = pd.read_csv(DATA_PATH)

# Helper to standardise LAD names
def normalise(name):
    return name.strip().lower().replace(" ", "_").replace("-", "_")

# UI Start
st.title("üìà Care Home Investment Decision Support Dashboard")
st.write("Powered by Explainable AI (SHAP/LIME) + GPT-Generated Summaries")

# LAD selection
lad_names = df["Local_Authority"].sort_values().unique()
selected_lad = st.selectbox("üîç Choose a Local Authority District:", lad_names)

# Display basic info
lad_row = df[df["Local_Authority"] == selected_lad].iloc[0]
st.subheader(f"üìä Investment Details for {selected_lad}")
st.markdown(f"""
- **Investment Score:** `{lad_row['Investment_Potential_Score']:.2f}`
- **Predicted Investment Label:** `{'üü¢ HIGH' if lad_row['High_Investment_Potential'] == 1 else 'üî¥ LOW'}`
- **% Aged 65+:** `{lad_row['Percent_65plus']}%`
- **GDHI Per Head:** `¬£{int(lad_row['GDHI_per_head_2022'])}`
- **House Price Growth:** `{lad_row['House_Price_Growth_%']}%`
- **Care Homes Count:** `{lad_row['Care_Homes_Count']}`
- **Care Homes per 10k:** `{lad_row['Care_Homes_per_10k']:.2f}`
- **% CQC Good:** `{lad_row['%_CQC_Good']}%`
- **% Requires Improvement:** `{lad_row['%_CQC_RequiresImprovement']}%`
""")

# SHAP visual
norm_name = normalise(selected_lad)
shap_path = os.path.join(SHAP_FOLDER, f"{norm_name}.png")
if os.path.exists(shap_path):
    st.subheader("üß† SHAP Visualisation")
    st.image(shap_path, use_column_width=True)
else:
    st.warning("No SHAP image available for this LAD.")

# GPT explanation
gpt_path = os.path.join(GPT_FOLDER, f"{norm_name}.txt")
if os.path.exists(gpt_path):
    st.subheader("üí¨ LLM Explanation")
    with open(gpt_path, "r", encoding="utf-8") as f:
        explanation = f.read()
    st.markdown(explanation)
else:
    st.info("No GPT summary found for this LAD.")

# Footer
st.markdown("---")
st.caption("MSc Project ‚Äì AI for Care Home Investment Support (2025)")